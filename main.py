import os
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import BOT_TOKEN, ADMIN_PASSWORD
from database import init_db, UserCRUD, AssignmentCRUD, SwapCRUD
from keyboards import get_main_keyboard, get_back_keyboard, get_calendar_keyboard
from states import CalendarFSM, SwapFSM
from utils import validate_starshina, schedule_reminders
from scheduler import scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_crud = UserCRUD()  # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    user = user_crud.get(message.from_user.id)  #  –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    
    if user:
        kb = get_main_keyboard(user.is_starshina)
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb)
    else:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–Ø —Å—Ç–∞—Ä—à–∏–Ω–∞", "–Ø –Ω–µ —Å—Ç–∞—Ä—à–∏–Ω–∞")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=kb)

@dp.message_handler(lambda message: message.text in ["–Ø —Å—Ç–∞—Ä—à–∏–Ω–∞", "–Ø –Ω–µ —Å—Ç–∞—Ä—à–∏–Ω–∞"])
async def process_role(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    if message.text == "–Ø —Å—Ç–∞—Ä—à–∏–Ω–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å—Ç–∞—Ä—à–∏–Ω—ã:", reply_markup=get_back_keyboard())
        await CalendarFSM.waiting_password.set()
    else:
        if not UserCRUD.exists(message.from_user.id):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
            await CalendarFSM.registration.set()
        else:
            await show_user_menu(message)

@dp.message_handler(state=CalendarFSM.waiting_password)
async def process_password(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å—Ç–∞—Ä—à–∏–Ω—ã"""
    if message.text == ADMIN_PASSWORD:
        UserCRUD.set_starshina(message.from_user.id, True)
        await message.answer("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω!", reply_markup=get_main_keyboard(True))
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
    await state.finish()

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ...

@dp.message_handler(state=CalendarFSM.registration)
async def process_registration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.text == "–ù–∞–∑–∞–¥":
        await cmd_start(message)
        return
    
    UserCRUD.create(
        telegram_id=message.from_user.id,
        name=message.text,
        is_starshina=False
    )
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.text}!", reply_markup=get_main_keyboard(False))
    await state.finish()

@dp.message_handler(lambda message: message.text == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å")
@validate_starshina
async def show_calendar_menu(message: types.Message):
    """–ú–µ–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Å—Ç–∞—Ä—à–∏–Ω—ã"""
    await CalendarFSM.choosing_year.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=get_calendar_keyboard("year"))

@dp.callback_query_handler(lambda c: c.data.startswith("year_"), state=CalendarFSM.choosing_year)
async def process_year(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    year = int(callback_query.data.split("_")[1])
    async with state.proxy() as data:
        data["year"] = year
    await CalendarFSM.next()
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
        reply_markup=get_calendar_keyboard("week", year=year)
    )

@dp.callback_query_handler(lambda c: c.data.startswith("week_"), state=CalendarFSM.choosing_week)
async def process_week(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏"""
    week = int(callback_query.data.split("_")[1])
    async with state.proxy() as data:
        data["week"] = week
    await CalendarFSM.next()
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:",
        reply_markup=get_calendar_keyboard("day", year=data["year"], week=week)
    )

@dp.callback_query_handler(lambda c: c.data.startswith("day_"), state=CalendarFSM.choosing_day)
async def process_day(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    date_str = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data["date"] = date_str
    users = UserCRUD.get_all()
    kb = types.InlineKeyboardMarkup()
    for user in users:
        kb.add(types.InlineKeyboardButton(
            user.name, 
            callback_data=f"assign_{user.telegram_id}"
        ))
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–∞ {date_str}:",
        reply_markup=kb
    )
    await CalendarFSM.next()

@dp.callback_query_handler(lambda c: c.data.startswith("assign_"), state=CalendarFSM.assigning_user)
async def assign_duty(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞"""
    user_id = int(callback_query.data.split("_")[1])
    async with state.proxy() as data:
        date_str = data["date"]
    
    AssignmentCRUD.create(date=date_str, user_id=user_id)
    await bot.send_message(
        callback_query.from_user.id,
        "–î–µ–∂—É—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ!",
        reply_markup=get_main_keyboard(True)
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_assignment_notification(user_id, date_str)
    await state.finish()

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ...

async def send_assignment_notification(user_id: int, date: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏"""
    user = UserCRUD.get(user_id)
    if user.notify_assignment:
        kb = types.InlineKeyboardMarkup()
        kb.add(
            types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è–ª", callback_data=f"accept_{date}"),
            types.InlineKeyboardButton("üîÑ –û–±–º–µ–Ω", callback_data=f"swap_{date}")
        )
        await bot.send_message(
            user_id,
            f"–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –¥–µ–∂—É—Ä–Ω—ã–º –Ω–∞ {date}",
            reply_markup=kb
        )
        schedule_reminders(user_id, date)

@dp.callback_query_handler(lambda c: c.data.startswith("accept_"))
async def accept_duty(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞"""
    date = callback_query.data.split("_")[1]
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ {date}!"
    )
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—à–∏–Ω—ã
    await notify_starshina(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} –ø—Ä–∏–Ω—è–ª –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ {date}")

@dp.callback_query_handler(lambda c: c.data.startswith("swap_"))
async def start_swap(callback_query: types.CallbackQuery, state: FSMContext):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–º–µ–Ω–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º"""
    date = callback_query.data.split("_")[1]
    async with state.proxy() as data:
        data["swap_date"] = date
    await SwapFSM.select_user.set()
    users = UserCRUD.get_swappable(callback_query.from_user.id)
    kb = types.InlineKeyboardMarkup()
    for user in users:
        kb.add(types.InlineKeyboardButton(
            user.name, 
            callback_data=f"swap_target_{user.telegram_id}"
        ))
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞:",
        reply_markup=kb
    )

@dp.callback_query_handler(lambda c: c.data.startswith("swap_target_"), state=SwapFSM.select_user)
async def select_swap_target(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ü–µ–ª–∏ –¥–ª—è –æ–±–º–µ–Ω–∞"""
    target_id = int(callback_query.data.split("_")[2])
    async with state.proxy() as data:
        data["target_id"] = target_id
    await SwapFSM.next()
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )

@dp.message_handler(state=SwapFSM.enter_message)
async def process_swap_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞"""
    async with state.proxy() as data:
        data["message"] = message.text if message.text != "-" else ""
        swap_date = data["swap_date"]
        target_id = data["target_id"]
    
    proposal_id = SwapCRUD.create_proposal(
        date=swap_date,
        from_user=message.from_user.id,
        to_user=target_id,
        message=data["message"]
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_proposal_{proposal_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_proposal_{proposal_id}")
    )
    
    await bot.send_message(
        target_id,
        f"–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –æ–±–º–µ–Ω –¥–µ–∂—É—Ä—Å—Ç–≤–æ–º –Ω–∞ {swap_date}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {data['message']}",
        reply_markup=kb
    )
    
    await message.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith("accept_proposal_"))
async def accept_proposal(callback_query: types.CallbackQuery):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞"""
    proposal_id = int(callback_query.data.split("_")[2])
    proposal = SwapCRUD.get_proposal(proposal_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    AssignmentCRUD.update_user(proposal.date, proposal.to_user)
    SwapCRUD.update_status(proposal_id, "accepted")
    
    await bot.send_message(
        proposal.from_user,
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} –ø—Ä–∏–Ω—è–ª –≤–∞—à –æ–±–º–µ–Ω –Ω–∞ {proposal.date}!"
    )
    await bot.send_message(
        proposal.to_user,
        f"–í—ã —Ç–µ–ø–µ—Ä—å –¥–µ–∂—É—Ä–∏—Ç–µ {proposal.date}!"
    )

@dp.message_handler(commands=['clearhistory'])
@validate_starshina
async def clear_history_command(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–∂—É—Ä—Å—Ç–≤"""
    AssignmentCRUD.clear_history()
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–∂—É—Ä—Å—Ç–≤ –æ—á–∏—â–µ–Ω–∞!")

if __name__ == "__main__":
    scheduler.start()
    executor.start_polling(dp, skip_updates=True)